{"ast":null,"code":"import { isValidElement, useRef, useState, useCallback, useEffect, useMemo, createContext, useContext, createElement, cloneElement } from 'react';\nvar isHTMLElement = value => value instanceof HTMLElement;\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst SELECT = 'select';\nconst UNDEFINED = 'undefined';\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nfunction attachEventListeners(_ref, shouldAttachChangeEvent, handleChange) {\n  let {\n    ref\n  } = _ref;\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\nvar isNullOrUndefined = value => value == null;\nconst isObjectType = value => typeof value === 'object';\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !(value instanceof Date);\nvar isKey = value => /^\\w*$/.test(value);\nvar compact = value => value.filter(Boolean);\nvar stringToPath = input => compact(input.replace(/[\"|']/g, '').replace(/\\[/g, '.').replace(/\\]/g, '').split('.'));\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nvar transformToNestObject = function (data) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : value[key] = data[key];\n  }\n  return value;\n};\nvar isUndefined = val => val === undefined;\nvar get = function () {\n  let obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let path = arguments.length > 1 ? arguments[1] : undefined;\n  let defaultValue = arguments.length > 2 ? arguments[2] : undefined;\n  const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\nvar focusOnErrorField = (fields, fieldErrors) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.ref.checked ? {\n  isValid: true,\n  value: option.ref.value\n} : previous, defaultReturn) : defaultReturn;\nvar getMultipleSelectValue = options => [...options].filter(_ref2 => {\n  let {\n    selected\n  } = _ref2;\n  return selected;\n}).map(_ref3 => {\n  let {\n    value\n  } = _ref3;\n  return value;\n});\nvar isRadioInput = element => element.type === 'radio';\nvar isFileInput = element => element.type === 'file';\nvar isCheckBoxInput = element => element.type === 'checkbox';\nvar isMultipleSelect = element => element.type === `${SELECT}-multiple`;\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.ref.checked).map(_ref4 => {\n        let {\n          ref: {\n            value\n          }\n        } = _ref4;\n        return value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    const {\n      checked,\n      value,\n      attributes\n    } = options[0].ref;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || value === '' ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nfunction getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled, shouldKeepRawValue) {\n  const field = fieldsRef.current[name];\n  if (field) {\n    const {\n      ref: {\n        value,\n        disabled\n      },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs\n    } = field;\n    if (disabled && excludeDisabled) {\n      return;\n    }\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n    return shouldKeepRawValue ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? ref.valueAsDate : setValueAs ? setValueAs(value) : value;\n  }\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n  return isDetached(element.parentNode);\n}\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\nvar isBoolean = value => typeof value === 'boolean';\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {\n  const {\n    ref,\n    ref: {\n      name\n    }\n  } = field;\n  const fieldRef = fieldsRef.current[name];\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach(function () {\n        let option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        let index = arguments.length > 1 ? arguments[1] : undefined;\n        if (isDetached(option.ref) && isSameRef(option, option.ref) || forceDelete) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if (isDetached(ref) && isSameRef(fieldRef, ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n    delete fieldsRef.current[name];\n  }\n}\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n  return target;\n}\nfunction deepEqual(object1, object2, isErrorObject) {\n  if (isPrimitive(object1) || isPrimitive(object2) || object1 instanceof Date || object2 instanceof Date) {\n    return object1 === object2;\n  }\n  if (!isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n    for (const key of keys1) {\n      const val1 = object1[key];\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n        if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n  return dirtyFields;\n}\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\nvar isString = value => typeof value === 'string';\nvar getFieldsValues = (fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) => {\n  const output = {};\n  for (const name in fieldsRef.current) {\n    if (isUndefined(search) || (isString(search) ? name.startsWith(search) : Array.isArray(search) && search.find(data => name.startsWith(data)))) {\n      output[name] = getFieldValue(fieldsRef, name, undefined, excludeDisabled);\n    }\n  }\n  return shouldUnregister ? transformToNestObject(output) : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\nvar isErrorStateChanged = _ref5 => {\n  let {\n    errors,\n    name,\n    error,\n    validFields,\n    fieldsWithValidation\n  } = _ref5;\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n  return isValid && !!previousError || !isValid && !deepEqual(previousError, error, true) || isValid && get(fieldsWithValidation, name) && !get(validFields, name);\n};\nvar isRegex = value => value instanceof RegExp;\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\nvar isFunction = value => typeof value === 'function';\nvar isMessage = value => isString(value) || isValidElement(value);\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n  if (isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\nvar validateField = async (fieldsRef, validateAllFieldCriteria, _ref6, shallowFieldsStateRef) => {\n  let {\n    ref,\n    ref: {\n      value\n    },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate\n  } = _ref6;\n  const name = ref.name;\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n  };\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? ((fieldsRef.current[name].options || [])[0] || {}).ref : ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n    if (!isNaN(value)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && value.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && value.length < minLengthOutput.value;\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if (isString(value) && pattern && !isEmpty) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if (validate) {\n    const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef, false, true);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(validateResult, validateRef, key);\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n  return error;\n};\nconst getPath = function (rootPath, values) {\n  let paths = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  for (const property in values) {\n    const rootName = rootPath + (isObject(values) ? `.${property}` : `[${property}]`);\n    isPrimitive(values[property]) ? paths.push(rootName) : getPath(rootName, values[property], paths);\n  }\n  return paths;\n};\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\n  let value = undefined;\n  watchFields.add(fieldName);\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach(name => watchFields.add(name));\n    }\n  }\n  return isUndefined(value) ? isSingleField ? inputValue : get(inputValue, fieldName) : value;\n};\nvar skipValidation = _ref7 => {\n  let {\n    isOnBlur,\n    isOnChange,\n    isOnTouch,\n    isTouched,\n    isReValidateOnBlur,\n    isReValidateOnChange,\n    isBlurEvent,\n    isSubmitted,\n    isOnAll\n  } = _ref7;\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar getFieldArrayParentName = name => name.substring(0, name.indexOf('['));\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\nvar isNameInFieldArray = (names, name) => [...names].some(current => isMatchFieldArrayName(name, current));\nvar isSelectInput = element => element.type === `${SELECT}-one`;\nfunction onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {\n  const observer = new MutationObserver(() => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nvar isWeb = typeof window !== UNDEFINED && typeof document !== UNDEFINED;\nfunction cloneObject(data) {\n  var _a;\n  let copy;\n  if (isPrimitive(data) || isWeb && (data instanceof File || isHTMLElement(data))) {\n    return data;\n  }\n  if (!['Set', 'Map', 'Object', 'Date', 'Array'].includes((_a = data.constructor) === null || _a === void 0 ? void 0 : _a.name)) {\n    return data;\n  }\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n  copy = Array.isArray(data) ? [] : {};\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n  return copy;\n}\nvar modeChecker = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\nfunction useForm() {\n  let {\n    mode = VALIDATION_MODE.onSubmit,\n    reValidateMode = VALIDATION_MODE.onChange,\n    resolver,\n    context,\n    defaultValues = {},\n    shouldFocusError = true,\n    shouldUnregister = true,\n    criteriaMode\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const fieldsRef = useRef({});\n  const fieldArrayDefaultValuesRef = useRef({});\n  const fieldArrayValuesRef = useRef({});\n  const watchFieldsRef = useRef(new Set());\n  const useWatchFieldsRef = useRef({});\n  const useWatchRenderFunctionsRef = useRef({});\n  const fieldsWithValidationRef = useRef({});\n  const validFieldsRef = useRef({});\n  const defaultValuesRef = useRef(defaultValues);\n  const isUnMount = useRef(false);\n  const isWatchAllRef = useRef(false);\n  const handleChangeRef = useRef();\n  const shallowFieldsStateRef = useRef({});\n  const resetFieldArrayFunctionRef = useRef({});\n  const contextRef = useRef(context);\n  const resolverRef = useRef(resolver);\n  const fieldArrayNamesRef = useRef(new Set());\n  const modeRef = useRef(modeChecker(mode));\n  const {\n    isOnSubmit,\n    isOnTouch\n  } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {}\n  });\n  const readFormStateRef = useRef({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  const formStateRef = useRef(formState);\n  const observerRef = useRef();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange\n  } = useRef(modeChecker(reValidateMode)).current;\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister ? {} : isEmptyObject(shallowFieldsStateRef.current) ? cloneObject(defaultValues) : shallowFieldsStateRef.current;\n  const updateFormState = useCallback(function () {\n    let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!isUnMount.current) {\n      formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);\n      setFormState(formStateRef.current);\n    }\n  }, []);\n  const updateIsValidating = () => readFormStateRef.current.isValidating && updateFormState({\n    isValidating: true\n  });\n  const shouldRenderBaseOnError = useCallback(function (name, error) {\n    let shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let state = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let isValid = arguments.length > 4 ? arguments[4] : undefined;\n    let shouldReRender = shouldRender || isErrorStateChanged({\n      errors: formStateRef.current.errors,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n    const previousError = get(formStateRef.current.errors, name);\n    if (error) {\n      unset(validFieldsRef.current, name);\n      shouldReRender = shouldReRender || !previousError || !deepEqual(previousError, error, true);\n      set(formStateRef.current.errors, name, error);\n    } else {\n      if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n        set(validFieldsRef.current, name, true);\n        shouldReRender = shouldReRender || previousError;\n      }\n      unset(formStateRef.current.errors, name);\n    }\n    if (shouldReRender && !isNullOrUndefined(shouldRender) || !isEmptyObject(state) || readFormStateRef.current.isValidating) {\n      updateFormState(Object.assign(Object.assign(Object.assign({}, state), resolverRef.current ? {\n        isValid: !!isValid\n      } : {}), {\n        isValidating: false\n      }));\n    }\n  }, []);\n  const setFieldValue = useCallback((name, rawValue) => {\n    const {\n      ref,\n      options\n    } = fieldsRef.current[name];\n    const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n    if (isRadioInput(ref)) {\n      (options || []).forEach(_ref8 => {\n        let {\n          ref: radioRef\n        } = _ref8;\n        return radioRef.checked = radioRef.value === value;\n      });\n    } else if (isFileInput(ref) && !isString(value)) {\n      ref.files = value;\n    } else if (isMultipleSelect(ref)) {\n      [...ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(_ref9 => {\n        let {\n          ref: checkboxRef\n        } = _ref9;\n        return checkboxRef.checked = Array.isArray(value) ? !!value.find(data => data === checkboxRef.value) : value === checkboxRef.value;\n      }) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n  }, []);\n  const isFormDirty = useCallback((name, data) => {\n    if (readFormStateRef.current.isDirty) {\n      const formValues = getValues();\n      name && data && set(formValues, name, data);\n      return !deepEqual(formValues, defaultValuesRef.current);\n    }\n    return false;\n  }, []);\n  const updateAndGetDirtyState = useCallback(function (name) {\n    let shouldRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) {\n      const isFieldDirty = !deepEqual(get(defaultValuesRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      const previousIsDirty = formStateRef.current.isDirty;\n      isFieldDirty ? set(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);\n      const state = {\n        isDirty: isFormDirty(),\n        dirtyFields: formStateRef.current.dirtyFields\n      };\n      const isChanged = readFormStateRef.current.isDirty && previousIsDirty !== state.isDirty || readFormStateRef.current.dirtyFields && isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name);\n      isChanged && shouldRender && updateFormState(state);\n      return isChanged ? state : {};\n    }\n    return {};\n  }, []);\n  const executeValidation = useCallback(async (name, skipReRender) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!fieldsRef.current[name]) {\n        console.warn('📋 Field is missing with `name` attribute: ', name);\n        return false;\n      }\n    }\n    const error = (await validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef))[name];\n    shouldRenderBaseOnError(name, error, skipReRender);\n    return isUndefined(error);\n  }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\n  const executeSchemaOrResolverValidation = useCallback(async names => {\n    const {\n      errors\n    } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\n    const previousFormIsValid = formStateRef.current.isValid;\n    if (Array.isArray(names)) {\n      const isInputsValid = names.map(name => {\n        const error = get(errors, name);\n        error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n        return !error;\n      }).every(Boolean);\n      updateFormState({\n        isValid: isEmptyObject(errors),\n        isValidating: false\n      });\n      return isInputsValid;\n    } else {\n      const error = get(errors, names);\n      shouldRenderBaseOnError(names, error, previousFormIsValid !== isEmptyObject(errors), {}, isEmptyObject(errors));\n      return !error;\n    }\n  }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\n  const trigger = useCallback(async name => {\n    const fields = name || Object.keys(fieldsRef.current);\n    updateIsValidating();\n    if (resolverRef.current) {\n      return executeSchemaOrResolverValidation(fields);\n    }\n    if (Array.isArray(fields)) {\n      !name && (formStateRef.current.errors = {});\n      const result = await Promise.all(fields.map(async data => await executeValidation(data, null)));\n      updateFormState({\n        isValidating: false\n      });\n      return result.every(Boolean);\n    }\n    return await executeValidation(fields);\n  }, [executeSchemaOrResolverValidation, executeValidation]);\n  const setInternalValues = useCallback((name, value, _ref10) => {\n    let {\n      shouldDirty,\n      shouldValidate\n    } = _ref10;\n    const data = {};\n    set(data, name, value);\n    for (const fieldName of getPath(name, value)) {\n      if (fieldsRef.current[fieldName]) {\n        setFieldValue(fieldName, get(data, fieldName));\n        shouldDirty && updateAndGetDirtyState(fieldName);\n        shouldValidate && trigger(fieldName);\n      }\n    }\n  }, [trigger, setFieldValue, updateAndGetDirtyState]);\n  const setInternalValue = useCallback((name, value, config) => {\n    !shouldUnregister && !isPrimitive(value) && set(shallowFieldsStateRef.current, name, Array.isArray(value) ? [...value] : Object.assign({}, value));\n    if (fieldsRef.current[name]) {\n      setFieldValue(name, value);\n      config.shouldDirty && updateAndGetDirtyState(name);\n      config.shouldValidate && trigger(name);\n    } else if (!isPrimitive(value)) {\n      setInternalValues(name, value, config);\n      if (fieldArrayNamesRef.current.has(name)) {\n        const parentName = getFieldArrayParentName(name) || name;\n        set(fieldArrayDefaultValuesRef.current, name, value);\n        resetFieldArrayFunctionRef.current[parentName]({\n          [parentName]: get(fieldArrayDefaultValuesRef.current, parentName)\n        });\n        if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && config.shouldDirty) {\n          set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n          updateFormState({\n            isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), {\n              [name]: value\n            }), defaultValuesRef.current)\n          });\n        }\n      }\n    }\n    !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n  }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);\n  const isFieldWatched = name => isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n  const renderWatchedInputs = name => {\n    let found = true;\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (!name || !useWatchFieldsRef.current[key].size || useWatchFieldsRef.current[key].has(name) || useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n    return found;\n  };\n  function setValue(name, value, config) {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : async _ref11 => {\n    let {\n      type,\n      target\n    } = _ref11;\n    let name = target.name;\n    const field = fieldsRef.current[name];\n    let error;\n    let isValid;\n    if (field) {\n      const isBlurEvent = type === EVENTS.BLUR;\n      const shouldSkipValidation = skipValidation(Object.assign({\n        isBlurEvent,\n        isReValidateOnChange,\n        isReValidateOnBlur,\n        isTouched: !!get(formStateRef.current.touched, name),\n        isSubmitted: formStateRef.current.isSubmitted\n      }, modeRef.current));\n      let state = updateAndGetDirtyState(name, false);\n      let shouldRender = !isEmptyObject(state) || !isBlurEvent && isFieldWatched(name);\n      if (isBlurEvent && !get(formStateRef.current.touched, name) && readFormStateRef.current.touched) {\n        set(formStateRef.current.touched, name, true);\n        state = Object.assign(Object.assign({}, state), {\n          touched: formStateRef.current.touched\n        });\n      }\n      if (!shouldUnregister && isCheckBoxInput(target)) {\n        set(shallowFieldsStateRef.current, name, getFieldValue(fieldsRef, name));\n      }\n      if (shouldSkipValidation) {\n        !isBlurEvent && renderWatchedInputs(name);\n        return (!isEmptyObject(state) || shouldRender && isEmptyObject(state)) && updateFormState(state);\n      }\n      updateIsValidating();\n      if (resolverRef.current) {\n        const {\n          errors\n        } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\n        const previousFormIsValid = formStateRef.current.isValid;\n        error = get(errors, name);\n        if (isCheckBoxInput(target) && !error && resolverRef.current) {\n          const parentNodeName = getFieldArrayParentName(name);\n          const currentError = get(errors, parentNodeName, {});\n          currentError.type && currentError.message && (error = currentError);\n          if (parentNodeName && (currentError || get(formStateRef.current.errors, parentNodeName))) {\n            name = parentNodeName;\n          }\n        }\n        isValid = isEmptyObject(errors);\n        previousFormIsValid !== isValid && (shouldRender = true);\n      } else {\n        error = (await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef))[name];\n      }\n      !isBlurEvent && renderWatchedInputs(name);\n      shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n    }\n  };\n  function setFieldArrayDefaultValues(data) {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = Object.assign(Object.assign({}, copy), {\n            [value]: []\n          });\n        }\n      }\n      return copy;\n    }\n    return data;\n  }\n  function getValues(payload) {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n    if (Array.isArray(payload)) {\n      const data = {};\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n      return data;\n    }\n    return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister));\n  }\n  const validateResolver = useCallback(async function () {\n    let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const newDefaultValues = isEmptyObject(fieldsRef.current) ? defaultValuesRef.current : {};\n    const {\n      errors\n    } = (await resolverRef.current(Object.assign(Object.assign(Object.assign({}, newDefaultValues), getValues()), values), contextRef.current, isValidateAllFieldCriteria)) || {};\n    const isValid = isEmptyObject(errors);\n    formStateRef.current.isValid !== isValid && updateFormState({\n      isValid\n    });\n  }, [isValidateAllFieldCriteria]);\n  const removeFieldEventListener = useCallback((field, forceDelete) => {\n    findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete);\n    if (shouldUnregister) {\n      unset(validFieldsRef.current, field.ref.name);\n      unset(fieldsWithValidationRef.current, field.ref.name);\n    }\n  }, [shouldUnregister]);\n  const updateWatchedValue = useCallback(name => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n      renderWatchedInputs(name);\n    }\n  }, []);\n  const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\n    if (field) {\n      removeFieldEventListener(field, forceDelete);\n      if (shouldUnregister && !compact(field.options || []).length) {\n        unset(formStateRef.current.errors, field.ref.name);\n        set(formStateRef.current.dirtyFields, field.ref.name, true);\n        updateFormState({\n          isDirty: isFormDirty()\n        });\n        readFormStateRef.current.isValid && resolverRef.current && validateResolver();\n        updateWatchedValue(field.ref.name);\n      }\n    }\n  }, [validateResolver, removeFieldEventListener]);\n  function clearErrors(name) {\n    name && (Array.isArray(name) ? name : [name]).forEach(inputName => fieldsRef.current[inputName] && isKey(inputName) ? delete formStateRef.current.errors[inputName] : unset(formStateRef.current.errors, inputName));\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {}\n    });\n  }\n  function setError(name, error) {\n    const ref = (fieldsRef.current[name] || {}).ref;\n    set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    updateFormState({\n      isValid: false\n    });\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n  const watchInternal = useCallback((fieldNames, defaultValue, watchId) => {\n    const watchFields = watchId ? useWatchFieldsRef.current[watchId] : watchFieldsRef.current;\n    let fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, false, fieldNames);\n    if (isString(fieldNames)) {\n      const parentNodeName = getFieldArrayParentName(fieldNames) || fieldNames;\n      if (fieldArrayNamesRef.current.has(parentNodeName)) {\n        fieldValues = Object.assign(Object.assign({}, fieldArrayValuesRef.current), fieldValues);\n      }\n      return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(get(defaultValuesRef.current, fieldNames)) ? defaultValue : get(defaultValuesRef.current, fieldNames), true);\n    }\n    const combinedDefaultValues = isUndefined(defaultValue) ? defaultValuesRef.current : defaultValue;\n    if (Array.isArray(fieldNames)) {\n      return fieldNames.reduce((previous, name) => Object.assign(Object.assign({}, previous), {\n        [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)\n      }), {});\n    }\n    isWatchAllRef.current = isUndefined(watchId);\n    return transformToNestObject(!isEmptyObject(fieldValues) && fieldValues || combinedDefaultValues);\n  }, []);\n  function watch(fieldNames, defaultValue) {\n    return watchInternal(fieldNames, defaultValue);\n  }\n  function unregister(name) {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n  function registerFieldRef(ref) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute', ref, `https://react-hook-form.com/api#useForm`);\n      }\n      if (fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) && !RegExp(`^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(ref.name)) {\n        return console.warn('📋 `name` prop should be in object shape: name=\"test[index].name\"', ref, 'https://react-hook-form.com/api#useFieldArray');\n      }\n    }\n    const {\n      name,\n      type,\n      value\n    } = ref;\n    const fieldRefAndValidationOptions = Object.assign({\n      ref\n    }, options);\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = currentRef => isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name];\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n    if (field && (isRadioOrCheckbox ? Array.isArray(field.options) && compact(field.options).find(option => {\n      return value === option.ref.value && compareRef(option.ref);\n    }) : compareRef(field.ref))) {\n      fields[name] = Object.assign(Object.assign({}, field), options);\n      return;\n    }\n    if (type) {\n      field = isRadioOrCheckbox ? Object.assign({\n        options: [...compact(field && field.options || []), {\n          ref\n        }],\n        ref: {\n          type,\n          name\n        }\n      }, options) : Object.assign({}, fieldRefAndValidationOptions);\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n    fields[name] = field;\n    const isEmptyUnmountFields = isUndefined(get(shallowFieldsStateRef.current, name));\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(isEmptyUnmountFields ? defaultValuesRef.current : shallowFieldsStateRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then(error => {\n          const previousFormIsValid = formStateRef.current.isValid;\n          isEmptyObject(error) ? set(validFieldsRef.current, name, true) : unset(validFieldsRef.current, name);\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n    if (type) {\n      attachEventListeners(isRadioOrCheckbox && field.options ? field.options[field.options.length - 1] : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\n    }\n  }\n  function register(refOrRegisterOptions, options) {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({\n          name: refOrRegisterOptions\n        }, options);\n      } else if (isObject(refOrRegisterOptions) && 'name' in refOrRegisterOptions) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return ref => ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n  const handleSubmit = useCallback((onValid, onInvalid) => async e => {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n      e.persist();\n    }\n    let fieldErrors = {};\n    let fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, true));\n    readFormStateRef.current.isSubmitting && updateFormState({\n      isSubmitting: true\n    });\n    try {\n      if (resolverRef.current) {\n        const {\n          errors,\n          values\n        } = await resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\n        formStateRef.current.errors = fieldErrors = errors;\n        fieldValues = values;\n      } else {\n        for (const field of Object.values(fieldsRef.current)) {\n          if (field) {\n            const {\n              name\n            } = field.ref;\n            const fieldError = await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\n            if (fieldError[name]) {\n              set(fieldErrors, name, fieldError[name]);\n              unset(validFieldsRef.current, name);\n            } else if (get(fieldsWithValidationRef.current, name)) {\n              unset(formStateRef.current.errors, name);\n              set(validFieldsRef.current, name, true);\n            }\n          }\n        }\n      }\n      if (isEmptyObject(fieldErrors) && Object.keys(formStateRef.current.errors).every(name => name in fieldsRef.current)) {\n        updateFormState({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);\n        onInvalid && (await onInvalid(formStateRef.current.errors, e));\n        shouldFocusError && focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n      }\n    } finally {\n      formStateRef.current.isSubmitting = false;\n      updateFormState({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n        submitCount: formStateRef.current.submitCount + 1\n      });\n    }\n  }, [shouldFocusError, isValidateAllFieldCriteria]);\n  const resetRefs = _ref12 => {\n    let {\n      errors,\n      isDirty,\n      isSubmitted,\n      touched,\n      isValid,\n      submitCount,\n      dirtyFields\n    } = _ref12;\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n  };\n  const reset = function (values) {\n    let omitResetState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const {\n            ref,\n            options\n          } = field;\n          const inputRef = isRadioOrCheckboxFunction(ref) && Array.isArray(options) ? options[0].ref : ref;\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n    }\n    fieldsRef.current = {};\n    defaultValuesRef.current = Object.assign({}, values || defaultValuesRef.current);\n    values && renderWatchedInputs('');\n    Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\n    shallowFieldsStateRef.current = shouldUnregister ? {} : cloneObject(values || defaultValuesRef.current);\n    resetRefs(omitResetState);\n  };\n  useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current = observerRef.current || !isWeb ? observerRef.current : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n  useEffect(() => () => {\n    observerRef.current && observerRef.current.disconnect();\n    isUnMount.current = true;\n    if (process.env.NODE_ENV !== 'production') {\n      return;\n    }\n    Object.values(fieldsRef.current).forEach(field => removeFieldEventListenerAndRef(field, true));\n  }, []);\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid = deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) && isEmptyObject(formStateRef.current.errors);\n  }\n  const commonProps = {\n    trigger,\n    setValue: useCallback(setValue, [setInternalValue, trigger]),\n    getValues: useCallback(getValues, []),\n    register: useCallback(register, [defaultValuesRef.current]),\n    unregister: useCallback(unregister, []),\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: (obj, prop) => {\n        if (process.env.NODE_ENV !== 'production') {\n          if (prop === 'isValid' && isOnSubmit) {\n            console.warn('📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState');\n          }\n        }\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n        return undefined;\n      }\n    }) : formState\n  };\n  const control = useMemo(() => Object.assign({\n    isFormDirty,\n    updateWatchedValue,\n    shouldUnregister,\n    updateFormState,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange\n    },\n    validateResolver: resolver ? validateResolver : undefined,\n    fieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    fieldArrayValuesRef\n  }, commonProps), [defaultValuesRef.current, updateWatchedValue, shouldUnregister, removeFieldEventListener, watchInternal]);\n  return Object.assign({\n    watch,\n    control,\n    handleSubmit,\n    reset: useCallback(reset, []),\n    clearErrors: useCallback(clearErrors, []),\n    setError: useCallback(setError, []),\n    errors: formState.errors\n  }, commonProps);\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nconst FormContext = createContext(null);\nFormContext.displayName = 'RHFContext';\nconst useFormContext = () => useContext(FormContext);\nconst FormProvider = _a => {\n  var {\n      children\n    } = _a,\n    props = __rest(_a, [\"children\"]);\n  return createElement(FormContext.Provider, {\n    value: Object.assign({}, props)\n  }, children);\n};\nvar generateId = () => {\n  const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort((a, b) => a - b));\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n  return [];\n};\nvar swapArrayAt = (data, indexA, indexB) => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\nfunction prepend(data, value) {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...(Array.isArray(value) ? value : [value || undefined]), ...data.slice(index)];\n}\nvar fillEmptyArray = value => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\nvar fillBooleanArray = value => (Array.isArray(value) ? value : [value]).map(data => {\n  if (isObject(data)) {\n    const object = {};\n    for (const key in data) {\n      object[key] = true;\n    }\n    return object;\n  }\n  return true;\n});\nconst mapIds = function () {\n  let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let keyName = arguments.length > 1 ? arguments[1] : undefined;\n  let skipWarn = arguments.length > 2 ? arguments[2] : undefined;\n  if (process.env.NODE_ENV !== 'production') {\n    if (!skipWarn) {\n      for (const value of values) {\n        if (typeof value === 'object') {\n          if (keyName in value) {\n            console.warn(`📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`);\n            break;\n          }\n        } else {\n          console.warn(`📋 useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`);\n          break;\n        }\n      }\n    }\n  }\n  return values.map(value => Object.assign({\n    [keyName]: value[keyName] || generateId()\n  }, value));\n};\nconst useFieldArray = _ref13 => {\n  let {\n    control,\n    name,\n    keyName = 'id'\n  } = _ref13;\n  const methods = useFormContext();\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray');\n    }\n  }\n  const focusIndexRef = useRef(-1);\n  const isUnMount = useRef(false);\n  const {\n    isFormDirty,\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n    fieldArrayValuesRef\n  } = control || methods.control;\n  const getDefaultValues = values => get(shouldUnregister ? values : shallowFieldsStateRef.current, name, []);\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = useRef([...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName) ? getDefaultValues(fieldArrayDefaultValuesRef.current) : getDefaultValues(defaultValuesRef.current))]);\n  const [fields, setFields] = useState(mapIds(memoizedDefaultValues.current, keyName));\n  set(fieldArrayValuesRef.current, name, compact(fields));\n  const omitKey = fields => fields.map(function () {\n    let _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _b = keyName,\n      omitted = _a[_b],\n      rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n    return rest;\n  });\n  fieldArrayNamesRef.current.add(name);\n  const getFieldArrayValue = useCallback(() => get(fieldArrayValuesRef.current, name, []), [name]);\n  const getCurrentFieldsValues = () => mapIds(get(getValues(), name, getFieldArrayValue()).map((item, index) => Object.assign(Object.assign({}, getFieldArrayValue()[index]), item)), keyName, true);\n  fieldArrayNamesRef.current.add(name);\n  if (fieldArrayParentName && !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(fieldArrayDefaultValuesRef.current, fieldArrayParentName, cloneObject(get(defaultValuesRef.current, fieldArrayParentName)));\n  }\n  const setFieldAndValidState = fieldsValues => {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name)) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n        delete fieldsRef.current[key];\n      }\n    }\n  };\n  const cleanup = ref => !compact(get(ref, name, [])).length && unset(ref, name);\n  const updateDirtyFieldsWithDefaultValues = updatedFieldArrayValues => {\n    if (updatedFieldArrayValues) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n    }\n  };\n  const batchStateUpdate = function (method, args, updatedFieldValues) {\n    let updatedFormValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let shouldSet = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let shouldUpdateValid = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(get(shallowFieldsStateRef.current, name), args.argA, args.argB);\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(get(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n    }\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n    if (readFormStateRef.current.touched && get(formStateRef.current.touched, name)) {\n      const output = method(get(formStateRef.current.touched, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFormValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n    if (shouldUpdateValid && readFormStateRef.current.isValid && !validateResolver) {\n      set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\n      cleanup(validFieldsRef.current);\n      set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\n      cleanup(fieldsWithValidationRef.current);\n    }\n    if (!isUnMount.current && readFormStateRef.current.isDirty) {\n      updateFormState({\n        isDirty: isFormDirty(name, omitKey(updatedFormValues))\n      });\n    }\n  };\n  const append = function (value) {\n    let shouldFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const appendValue = Array.isArray(value) ? value : [value];\n    const updateFormValues = [...getCurrentFieldsValues(), ...mapIds(appendValue, keyName)];\n    setFieldAndValidState(updateFormValues);\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields\n      });\n    }\n    !shouldUnregister && set(shallowFieldsStateRef.current, name, [...(get(shallowFieldsStateRef.current, name) || []), ...cloneObject(appendValue)]);\n    focusIndexRef.current = shouldFocus ? get(fieldArrayValuesRef.current, name).length - 1 : -1;\n  };\n  const prepend$1 = function (value) {\n    let shouldFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), mapIds(Array.isArray(value) ? value : [value], keyName));\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(prepend, {\n      argA: emptyArray,\n      argC: fillBooleanArray(value)\n    }, updatedFieldArrayValues);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n  const remove = index => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues = removeArrayAt(fieldValues, index);\n    setFieldAndValidState(updatedFieldValues);\n    resetFields();\n    batchStateUpdate(removeArrayAt, {\n      argA: index,\n      argC: index\n    }, updatedFieldValues, removeArrayAt(fieldValues, index), true, true);\n  };\n  const insert$1 = function (index, value) {\n    let shouldFocus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insert(fieldValues, index, mapIds(Array.isArray(value) ? value : [value], keyName));\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(insert, {\n      argA: index,\n      argB: emptyArray,\n      argC: index,\n      argD: fillBooleanArray(value)\n    }, updatedFieldArrayValues, insert(fieldValues, index));\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n  const swap = (indexA, indexB) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(swapArrayAt, {\n      argA: indexA,\n      argB: indexB,\n      argC: indexA,\n      argD: indexB\n    }, undefined, fieldValues, false);\n  };\n  const move = (from, to) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(moveArrayAt, {\n      argA: from,\n      argB: to,\n      argC: from,\n      argD: to\n    }, undefined, fieldValues, false);\n  };\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn('📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray');\n      }\n    }\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n    if (defaultValues && fields.length < defaultValues.length) {\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues.slice(1));\n    }\n    updateWatchedValue(name);\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (key.startsWith(`${name}[${focusIndexRef.current}]`) && field.ref.focus) {\n          field.ref.focus();\n          break;\n        }\n      }\n    }\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n  useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = data => {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n        if (!isUnMount.current) {\n          setFields(mapIds(memoizedDefaultValues.current, keyName));\n        }\n      };\n    }\n    return () => {\n      isUnMount.current = true;\n      shouldUnregister && remove();\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef.current, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n  return {\n    swap: useCallback(swap, [name]),\n    move: useCallback(move, [name]),\n    prepend: useCallback(prepend$1, [name]),\n    append: useCallback(append, [name]),\n    remove: useCallback(remove, [name]),\n    insert: useCallback(insert$1, [name]),\n    fields: compact(fields)\n  };\n};\nvar getInputValue = event => isPrimitive(event) || !isObject(event.target) || isObject(event.target) && !event.type ? event : isUndefined(event.target.value) ? event.target.checked : event.target.value;\nfunction useController(_ref14) {\n  let {\n    name,\n    rules,\n    defaultValue,\n    control,\n    onFocus\n  } = _ref14;\n  const methods = useFormContext();\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller');\n    }\n  }\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange\n    },\n    formState,\n    formStateRef: {\n      current: {\n        isSubmitted,\n        touched,\n        errors\n      }\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () => !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray ? get(shallowFieldsStateRef.current, name) : isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue;\n  const [value, setInputStateValue] = useState(getInitialValue());\n  const valueRef = useRef(value);\n  const ref = useRef({\n    focus: () => null\n  });\n  const onFocusRef = useRef(onFocus || (() => {\n    if (isFunction(ref.current.focus)) {\n      ref.current.focus();\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (!isFunction(ref.current.focus)) {\n        console.warn(`📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`);\n      }\n    }\n  }));\n  const shouldValidate = useCallback(isBlurEvent => !skipValidation(Object.assign({\n    isBlurEvent,\n    isReValidateOnBlur,\n    isReValidateOnChange,\n    isSubmitted,\n    isTouched: !!get(touched, name)\n  }, mode)), [isReValidateOnBlur, isReValidateOnChange, isSubmitted, touched, name, mode]);\n  const commonTask = useCallback(_ref15 => {\n    let [event] = _ref15;\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n  const registerField = useCallback(shouldUpdateValue => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        return console.warn('📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller');\n      }\n    }\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = Object.assign({\n        ref: fieldsRef.current[name].ref\n      }, rules);\n    } else {\n      register(Object.defineProperties({\n        name,\n        focus: onFocusRef.current\n      }, {\n        value: {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          }\n        }\n      }), rules);\n      shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n    }\n    shouldUpdateValue && isNotFieldArray && setInputStateValue(getInitialValue());\n  }, [rules, name, register]);\n  useEffect(() => () => unregister(name), [name]);\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(`📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`);\n      }\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn('📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller');\n      }\n    }\n    registerField();\n  }, [registerField]);\n  useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n  const onBlur = useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched\n      });\n    }\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n  const onChange = useCallback(function () {\n    for (var _len = arguments.length, event = new Array(_len), _key = 0; _key < _len; _key++) {\n      event[_key] = arguments[_key];\n    }\n    return setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true\n    });\n  }, [setValue, name, shouldValidate]);\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref\n    },\n    meta: Object.defineProperties({\n      invalid: !!get(errors, name)\n    }, {\n      isDirty: {\n        get() {\n          return !!get(formState.dirtyFields, name);\n        }\n      },\n      isTouched: {\n        get() {\n          return !!get(formState.touched, name);\n        }\n      }\n    })\n  };\n}\nfunction useWatch(_ref16) {\n  let {\n    control,\n    name,\n    defaultValue\n  } = _ref16;\n  const methods = useFormContext();\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch');\n    }\n  }\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef\n  } = control || methods.control;\n  const updateValue = useState()[1];\n  const idRef = useRef();\n  const defaultValueRef = useRef(defaultValue);\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn('📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch');\n      }\n    }\n    const id = idRef.current = generateId();\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = () => updateValue({});\n    watchInternal(name, defaultValueRef.current, id);\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [name, useWatchRenderFunctionsRef, useWatchFieldsRef, watchInternal, defaultValueRef]);\n  return idRef.current ? watchInternal(name, defaultValueRef.current, idRef.current) : isUndefined(defaultValue) ? isString(name) ? get(defaultValuesRef.current, name) : Array.isArray(name) ? name.reduce((previous, inputName) => Object.assign(Object.assign({}, previous), {\n    [inputName]: get(defaultValuesRef.current, inputName)\n  }), {}) : defaultValuesRef.current : defaultValue;\n}\nconst Controller = props => {\n  const {\n      rules,\n      as,\n      render,\n      defaultValue,\n      control,\n      onFocus\n    } = props,\n    rest = __rest(props, [\"rules\", \"as\", \"render\", \"defaultValue\", \"control\", \"onFocus\"]);\n  const {\n    field,\n    meta\n  } = useController(props);\n  const componentProps = Object.assign(Object.assign({}, rest), field);\n  return as ? isValidElement(as) ? cloneElement(as, componentProps) : createElement(as, componentProps) : render ? render(field, meta) : null;\n};\nexport { Controller, FormProvider, appendErrors, get, transformToNestObject, useController, useFieldArray, useForm, useFormContext, useWatch };","map":{"version":3,"names":["isHTMLElement","value","HTMLElement","EVENTS","BLUR","CHANGE","INPUT","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","attachEventListeners","_ref","shouldAttachChangeEvent","handleChange","ref","addEventListener","isNullOrUndefined","isObjectType","isObject","Array","isArray","Date","isKey","test","compact","filter","Boolean","stringToPath","input","replace","split","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","arguments","undefined","isUndefined","val","get","obj","defaultValue","result","reduce","focusOnErrorField","fields","fieldErrors","field","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","getRadioValue","previous","option","checked","getMultipleSelectValue","_ref2","selected","map","_ref3","isRadioInput","element","type","isFileInput","isCheckBoxInput","isMultipleSelect","defaultResult","validResult","getCheckboxValue","values","_ref4","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","files","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","isEmptyObject","Object","keys","isBoolean","baseGet","updatePath","slice","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","forEach","isPrimitive","deepMerge","target","source","targetValue","sourceValue","_a","deepEqual","object1","object2","isErrorObject","isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","assign","setFieldArrayDirtyFields","isString","getFieldsValues","shallowFieldsState","search","output","startsWith","find","isErrorStateChanged","_ref5","errors","error","validFields","fieldsWithValidation","previousError","isRegex","RegExp","getValueAndMessage","validationData","message","isFunction","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","types","validateField","_ref6","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","validateRef","validateError","validationResult","validateFunction","entries","validateResult","getPath","rootPath","paths","property","rootName","push","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","skipValidation","_ref7","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","getFieldArrayParentName","substring","indexOf","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isSelectInput","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","isWeb","cloneObject","copy","File","includes","constructor","getTime","Set","Map","modeChecker","mode","isOnSubmit","isRadioOrCheckboxFunction","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","isValidateAllFieldCriteria","formState","setFormState","useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","readFormStateRef","formStateRef","observerRef","updateFormState","useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","_ref8","radioRef","selectRef","_ref9","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","process","env","NODE_ENV","console","warn","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","setInternalValues","_ref10","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","setValue","_ref11","shouldSkipValidation","parentNodeName","currentError","setFieldArrayDefaultValues","payload","validateResolver","newDefaultValues","removeFieldEventListener","updateWatchedValue","watchField","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","resetRefs","_ref12","reset","omitResetState","inputRef","closest","resetFieldArray","useEffect","disconnect","commonProps","prop","control","useMemo","FormContext","createContext","displayName","useFormContext","useContext","FormProvider","children","props","__rest","createElement","Provider","generateId","d","performance","now","c","r","Math","random","toString","removeAtIndexes","indexes","i","temp","splice","removeArrayAt","sort","a","b","moveArrayAt","from","to","swapArrayAt","indexA","indexB","prepend","insert","fillEmptyArray","fill","fillBooleanArray","mapIds","keyName","skipWarn","useFieldArray","_ref13","methods","Error","focusIndexRef","getDefaultValues","fieldArrayParentName","memoizedDefaultValues","setFields","omitKey","_b","omitted","rest","getFieldArrayValue","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","batchStateUpdate","method","args","updatedFieldValues","updatedFormValues","shouldSet","shouldUpdateValid","argA","argB","append","appendValue","updateFormValues","prepend$1","emptyArray","argC","remove","insert$1","argD","swap","move","resetFunctions","fieldArrayNames","delete","getInputValue","event","useController","_ref14","rules","onFocus","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","_ref15","registerField","shouldUpdateValue","defineProperties","_len","_key","meta","invalid","useWatch","_ref16","updateValue","idRef","defaultValueRef","id","watchFieldsHookRender","watchFieldsHook","Controller","as","render","componentProps","cloneElement"],"sources":["/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isHTMLElement.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/constants.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/attachEventListeners.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isObject.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isKey.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/compact.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/stringToPath.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/set.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/transformToNestObject.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isUndefined.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/get.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/focusOnErrorField.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/removeAllEventListeners.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/getRadioValue.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/getMultipleSelectValue.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isRadioInput.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isFileInput.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isMultipleSelect.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/getCheckboxValue.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/getFieldValue.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isDetached.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isEmptyObject.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isBoolean.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/unset.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/findRemovedFieldAndRemoveListener.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isPrimitive.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/deepMerge.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/deepEqual.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/setFieldArrayDirtyFields.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isString.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/getFieldsValues.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/isErrorStateChanged.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isRegex.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/getValueAndMessage.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isFunction.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isMessage.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/getValidateError.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/appendErrors.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/validateField.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/getPath.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/assignWatchFields.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/skipValidation.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/getNodeParentName.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isSelectInput.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/onDomRemove.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isWeb.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/cloneObject.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/validationModeChecker.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/useForm.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/useFormContext.tsx","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/generateId.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/remove.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/move.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/swap.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/prepend.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/insert.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/fillEmptyArray.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/utils/fillBooleanArray.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/useFieldArray.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/logic/getInputValue.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/useController.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/useWatch.ts","/home/draouil/Documents/Workspaces/MoviesProject/MoviesFront/node_modules/react-hook-form/src/controller.tsx"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (\n    !['Set', 'Map', 'Object', 'Date', 'Array'].includes(\n      (data as Object).constructor?.name,\n    )\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(\n          shallowFieldsStateRef.current,\n          name,\n          Array.isArray(value) ? [...value] : { ...value },\n        );\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (Array.isArray(index) ? index : [index]).sort((a, b) => a - b),\n      );\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","export default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isObject from './isObject';\n\nexport default <T>(value: T) =>\n  ((Array.isArray(value) ? value : [value]) as T[]).map((data) => {\n    if (isObject(data)) {\n      const object: Record<string, boolean> = {};\n\n      for (const key in data) {\n        object[key] = true;\n      }\n\n      return object;\n    }\n\n    return true;\n  });\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport fillBooleanArray from './utils/fillBooleanArray';\nimport compact from './utils/compact';\nimport cloneObject from './utils/cloneObject';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n  UseFieldArrayMethods,\n} from './types';\n\nconst mapIds = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n  skipWarn?: boolean,\n): Partial<ArrayField<TFieldArrayValues, TKeyName>>[] => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!skipWarn) {\n      for (const value of values) {\n        if (typeof value === 'object') {\n          if (keyName in value) {\n            console.warn(\n              `📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`,\n            );\n\n            break;\n          }\n        } else {\n          console.warn(\n            `📋 useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`,\n          );\n\n          break;\n        }\n      }\n    }\n  }\n\n  return values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: value[keyName] || generateId(),\n    ...value,\n  }));\n};\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>): UseFieldArrayMethods<\n  TFieldArrayValues,\n  TKeyName\n> => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const isUnMount = React.useRef(false);\n  const {\n    isFormDirty,\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n    fieldArrayValuesRef,\n  } = control || methods.control;\n\n  const getDefaultValues = <T>(values: T) =>\n    get(shouldUnregister ? values : shallowFieldsStateRef.current, name, []);\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>([\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? getDefaultValues(fieldArrayDefaultValuesRef.current)\n      : getDefaultValues(defaultValuesRef.current)),\n  ]);\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  set(fieldArrayValuesRef.current, name, compact(fields));\n\n  const omitKey = <T extends (Partial<TFieldArrayValues> | undefined)[]>(\n    fields: T,\n  ) => fields.map(({ [keyName]: omitted, ...rest } = {}) => rest);\n\n  fieldArrayNamesRef.current.add(name);\n\n  const getFieldArrayValue = React.useCallback(\n    () => get(fieldArrayValuesRef.current, name, []),\n    [name],\n  );\n\n  const getCurrentFieldsValues = () =>\n    mapIds<TFieldArrayValues, TKeyName>(\n      get(getValues(), name, getFieldArrayValue()).map(\n        (item: Partial<TFieldArrayValues>, index: number) => ({\n          ...getFieldArrayValue()[index],\n          ...item,\n        }),\n      ),\n      keyName,\n      true,\n    );\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (\n    fieldArrayParentName &&\n    !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n  ) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      cloneObject(get(defaultValuesRef.current, fieldArrayParentName)),\n    );\n  }\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name)) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n        delete fieldsRef.current[key];\n      }\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) => {\n    if (updatedFieldArrayValues) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n    }\n  };\n\n  const batchStateUpdate = <\n    T extends Function,\n    K extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    updatedFieldValues?: K,\n    updatedFormValues: (Partial<TFieldArrayValues> | undefined)[] = [],\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(formStateRef.current.touched, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touched, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFormValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    if (!isUnMount.current && readFormStateRef.current.isDirty) {\n      updateFormState({\n        isDirty: isFormDirty(name, omitKey(updatedFormValues)),\n      });\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const appendValue = Array.isArray(value) ? value : [value];\n    const updateFormValues = [\n      ...getCurrentFieldsValues(),\n      ...mapIds(appendValue, keyName),\n    ];\n    setFieldAndValidState(updateFormValues);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields,\n      });\n    }\n\n    !shouldUnregister &&\n      set(shallowFieldsStateRef.current, name, [\n        ...(get(shallowFieldsStateRef.current, name) || []),\n        ...cloneObject(appendValue),\n      ]);\n\n    focusIndexRef.current = shouldFocus\n      ? get(fieldArrayValuesRef.current, name).length - 1\n      : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: emptyArray,\n        argC: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues: (\n      | Partial<TFieldArrayValues>\n      | undefined\n    )[] = removeArrayAt(fieldValues, index);\n    setFieldAndValidState(\n      updatedFieldValues as Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n    );\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      updatedFieldValues,\n      removeArrayAt(fieldValues, index),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insertAt(\n      fieldValues,\n      index,\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n      insertAt(fieldValues, index),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues.slice(1));\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = <TFieldValues>(\n        data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n      ) => {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(\n          data || defaultValuesRef.current,\n          name,\n        );\n        if (!isUnMount.current) {\n          setFields(mapIds(memoizedDefaultValues.current, keyName));\n        }\n      };\n    }\n\n    return () => {\n      isUnMount.current = true;\n      shouldUnregister && remove();\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef.current, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: compact(fields),\n  };\n};\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport {\n  FieldValues,\n  UseControllerOptions,\n  UseControllerMethods,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: UseControllerOptions<TFieldValues>): UseControllerMethods<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formState,\n    formStateRef: {\n      current: { isSubmitted, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperties(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            {\n              value: {\n                set(data) {\n                  setInputStateValue(data);\n                  valueRef.current = data;\n                },\n                get() {\n                  return valueRef.current;\n                },\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    meta: Object.defineProperties(\n      {\n        invalid: !!get(errors, name),\n      },\n      {\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touched, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const updateValue = React.useState<unknown>()[1];\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = () => updateValue({});\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return idRef.current\n    ? watchInternal(name, defaultValueRef.current, idRef.current)\n    : isUndefined(defaultValue)\n    ? isString(name)\n      ? get(defaultValuesRef.current, name)\n      : Array.isArray(name)\n      ? name.reduce(\n          (previous, inputName) => ({\n            ...previous,\n            [inputName]: get(defaultValuesRef.current, inputName),\n          }),\n          {},\n        )\n      : defaultValuesRef.current\n    : defaultValue;\n}\n","import * as React from 'react';\nimport { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field, meta } = useController(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field, meta)\n    : null;\n};\n\nexport { Controller };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}